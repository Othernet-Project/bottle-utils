Translation support (``bottle_utils.i18n``)
===========================================

How it works
------------

This module provides plugins and functions for translation and language
selection. 

Language selection is based on URLs. Each path in the app is augmented with
locale prefix. Therefore, ``/foo/bar/baz`` becomes ``/LOCALE/foo/bar/baz``
where ``LOCALE`` is any of the locales chosen as translation targets. When one
of the supported locales is found in the incoming request's path, then that
locale is activated.

Translation is performed by calling several of the translation functions
provied by this module. These are simple ``gettext()`` and ``ngettext()``
wrappers that are lazily evaluated with the help of
:py:class:`~bottle_utils.lazy.Lazy` class.

This module does not deal with message extraction or compilation. For this, you
can use the standard `GNU Gettext <http://www.gnu.org/software/gettext/>`_ 
utilities.

Setting up the app for translation
----------------------------------

To activate translations and language selection, you will need to configure the
plugin and middleware. 

.. note::

   The bottle plugin class, :py:class:`~bottle_utils.i18n.I18NPlugin`, double
   as WSGI middleware.

First prepare a list of languages you want to support::

    LANGS = [
        ('de_DE', 'Deutsch'),
        ('en_US', 'English'),
        ('fr_FR', 'français'),
        ('es_ES', 'español'),
        ('zh_CN', '中文')
    ]

Also decide which locale you would like to use as default. ::

    DEFAULT_LOCAL = 'en_US'

Finally you need to decide where you want to keep the locale directory where
translations are looked up. ::

    LOCALES_DIR = './locales'

To install the plugin and middle, you can simply pass the
:py:class:`~bottle_utils.i18n.I18NPlugin` class a bottle app object. ::

    from bottle_utils.i18n import I18NPlugin
    app = bottle.default_app()
    wsgi_app = I18NPlugin(app, 
                          languages=LANGS, 
                          default_locale=DEFAULT_LOCALE,
                          locale_dir=LOCALES_DIR)

This installs both the Bottle plugin and the WSGI middleware, and returns a
WSGI application object.

If, for any reason, you do not want the i18n WSGI middleware to be the first in
the stack, you can chain middleware as usual::

    from bottle_utils.i18n import I18NPlugin
    app = bottle.default_app()
    wsgi = SomeMiddleware(app)
    wsgi = I18NPlugin(wsgi, *other_args)
    wsgi.install_plugin(app)
    wsgi = SomeOtherPlugin(wsgi)

The :py:meth:`~bottle_utils.i18n.I18NPlugin.install_plugin` method only works
on the wsgi app returned from the plugin class. After wrapping with another
plugin, it is no longer available so it must be called immediately.


Translating in Python code
--------------------------

To translate in Python code, use the
:py:func:`~bottle_utils.i18n.lazy_gettext`,
:py:func:`~bottle_utils.i18n.lazy_ngettext`, and similar translation functions.

``lazy_gettext()`` is usually imported as ``_``, which is a common convention
(alias) for ``gettext()``. Other methods are aliased without the ``lazy_``
prefix. ::

    from bottle_utils.i18n import lazy_ngettext as ngettext, lazy_gettext as _

    def handler():
        return _('This is a translatable string')

This is a convention that allows the gettext utilities to successfully extract
the translation strings.

.. warning::
    The translation functions provided by this module **do not work outside of
    request context**. If you call them in a separate thread or a subprocess,
    you will get an exception. If your design allows for it, convert the
    lazy instances to strings before passing them to code running outside the
    request context.

Translating in templates
------------------------

Translating in templates is highly dependent on your template engine. Some
engines like Jinja2 may provide their own i18n mechanisms. In engines like
SimpleTemplate and Mako, the process is pretty straightfoward. The translation
methods are available in the templates using the naming convention discussed in
the `Translating in Python code`_ section. ::

    <p>{{ _('Current time') }}: {{ time }}</p>

.. note::
    In template engines that use Python in templates (SimpleTemplate, Mako,
    etc), the similarity between Python syntax and template syntax (the Python
    portion of the template anyway) allows us to extract messages from the
    templates the same way we do from Python code simply by asking the
    ``xgettext`` tool to treat the template files as Python source code.

Module contents
---------------

.. automodule:: bottle_utils.i18n
   :members:

